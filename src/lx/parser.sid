/*
 * Copyright 2008-2017 Katherine Flavel
 *
 * See LICENCE for the full copyright terms.
 */

%types%

	arr;
	char;
	flags;
	string;
	fsm;
	zone;
	ast;

%terminals%

	TOKEN: () -> (:string);
	IDENT: () -> (:string);

	ESC:  () -> (:char);
	OCT:  () -> (:char);
	HEX:  () -> (:char);
	CHAR: () -> (:char);

	RE: () -> (:flags);
	STR;

	BIND;
	SEMI;
	TO;
	MAP;

	CLOSE;  OPEN;
	LPAREN; RPAREN;

	STAR;
	CROSS;
	QMARK;

	TILDE;
	BANG;
	HAT;

	DASH;
	DOT;
	PIPE;
	AND;

	COMMA;

	EOF;
	!ERROR;
	!UNKNOWN;

%productions%

	<pattern-char>:   (:char) -> ();
	<pattern-buffer>: ()      -> (:arr);

	<deref-var>:       (:zone, :string) -> (:fsm);
	<deref-token>:     (:zone, :string) -> (:fsm);

	<compile-literal>: (:arr)         -> (:fsm);
	<compile-regex>:   (:arr, :flags) -> (:fsm);

	<regex-any>:    () -> (:fsm);

	<op-star>:        (:fsm) -> ();
	<op-cross>:       (:fsm) -> ();
	<op-qmark>:       (:fsm) -> ();
	<op-complement>:  (:fsm) -> ();
	<op-complete>:    (:fsm) -> ();
	<op-reverse>:     (:fsm) -> ();

	<op-concat>:      (:fsm, :fsm) -> (:fsm);
	<op-product>:     (:fsm, :fsm) -> (:fsm);
	<op-subtract>:    (:fsm, :fsm) -> (:fsm);
	<op-intersect>:   (:fsm, :fsm) -> (:fsm);
	<op-alt>:         (:fsm, :fsm) -> (:fsm);

	<subtract-exit>:  (:fsm, :fsm) -> (:fsm);

	<make-ast>:     ()            -> (:ast);
	<make-zone>:    (:ast, :zone) -> (:zone);

	<add-mapping>: (:ast, :zone, :zone, :fsm, :string) -> ();
	<add-binding>: (:ast, :zone, :string, :fsm)        -> ();

	<set-globalzone>: (:ast, :zone) -> ();

	<no-token>: () -> (:string);
	<no-exit>:  () -> (:fsm);
	<no-zone>:  () -> (:zone);

	<clone>: (:fsm) -> (:fsm);
	<free-arr>:     (:arr)    -> ();
	!<free-string>: (:string) -> (); /* XXX */

	<err-syntax>;
	!<err-expected-alt>;
	<err-expected-map>;
	<err-expected-bind>;
	<err-expected-semi>;
	<err-expected-to>;
	<err-expected-open>;
	<err-expected-close>;
	<err-expected-eof>;

	<err-expected-thing>;
	<err-expected-list>;

	pattern: (z :zone) -> (r :fsm) [

		body: () -> () = {
			{
				c = ESC;
			||
				c = OCT;
			||
				c = HEX;
			||
				c = CHAR;
			};
			<pattern-char>(c);
			body;
		||
			$;
		};

	] = {
		n = IDENT;
		r = <deref-var>(z, n);
	||
		t = TOKEN;
		r = <deref-token>(z, t);
	||
		body;
		STR;
		a = <pattern-buffer>;
		r = <compile-literal>(a);
		<free-arr>(a);
	||
		body;
		f = RE;
		a = <pattern-buffer>;
		r = <compile-regex>(a, f);
		<free-arr>(a);
	};

	expr: (z :zone) -> (q :fsm) [

		primary-expr: (z :zone) -> (q :fsm) = {
			q = pattern(z);
		||
			LPAREN;
			q = expr(z);
			RPAREN;
		};

		postfix-expr: (z :zone) -> (q :fsm) = {
			q = primary-expr(z);
		||
			q = postfix-expr(z);
			STAR;
			<op-star>(q);
		||
			q = postfix-expr(z);
			CROSS;
			<op-cross>(q);
		||
			q = postfix-expr(z);
			QMARK;
			<op-qmark>(q);
		};

		prefix-expr: (z :zone) -> (q :fsm) = {
			q = postfix-expr(z);
		||
			TILDE;
			q = prefix-expr(z);
			<op-complement>(q);
		||
			BANG; /* unary minus might make more sense here */
			q = prefix-expr(z);
			<op-reverse>(q);
		||
			HAT;
			q = prefix-expr(z);
			<op-complete>(q);
		};

		infix-expr: (z :zone) -> (q :fsm) [

			dot-expr: (z :zone) -> (q :fsm) = {
				q = prefix-expr(z);
			||
				a = prefix-expr(z);
				DOT;
				b = dot-expr(z);
				q = <op-product>(a, b);
			};

			cat-expr: (z :zone) -> (q :fsm) = {
				q = dot-expr(z);
			||
				a = dot-expr(z);
				/* no operator */
				b = cat-expr(z);
				q = <op-concat>(a, b);
			};

			sub-expr: (z :zone) -> (q :fsm) = {
				q = cat-expr(z);
			||
				a = cat-expr(z);
				DASH;
				b = sub-expr(z);
				q = <op-subtract>(a, b);
			};

			and-expr: (z :zone) -> (q :fsm) = {
				q = sub-expr(z);
			||
				a = and-expr(z);
				AND;
				b = sub-expr(z);
				q = <op-intersect>(a, b);
			};

			alt-expr: (z :zone) -> (q :fsm) = {
				q = and-expr(z);
			||
				a = alt-expr(z);
				PIPE;
				b = and-expr(z);
				q = <op-alt>(a, b);
			};

		] = {
			q = alt-expr(z);
		};

	] = {
		q = infix-expr(z);
	};

	token-mapping: (z :zone) -> (r :fsm, t :string) = {
		r = expr(z);

		{
			t = <no-token>;
		||
			{
				MAP;
			##
				<err-expected-map>;
			};

			t = TOKEN;
		};
	};

	list-of-things: (a :ast, z :zone, exit :fsm) -> () [

		token-thing: (a :ast, z :zone, exit :fsm) -> (q :fsm, t :string) = {
			(r, t) = token-mapping(z);

			q = <subtract-exit>(r, exit);

			{
				SEMI;
			##
				<err-expected-semi>;
			};
		};

		bind-thing: (a :ast, z :zone) -> () = {
			n = IDENT;

			{
				BIND;
			##
				<err-expected-bind>;
			};

			/*
			 * We don't subtract the exit pattern here because we
			 * have no way to know how this binding will be used.
			 */
			r = expr(z);

			{
				SEMI;
			##
				<err-expected-semi>;
			};

			<add-binding>(a, z, n, r);
		};

		oneway-thing: (a :ast, parent :zone, exit :fsm) -> () = {
			(r1, t1) = token-mapping(parent);

			q1 = <subtract-exit>(r1, exit);

			/*
			 * A "one-way" zone. The lexer can enter, but never exit.
			 * These zones cannot be implicit; there must be a body.
			 */

			r2 = <no-exit>;

			child = <make-zone>(a, parent);

			<add-mapping>(a, parent, child, q1, t1);

			{
				{
					OPEN;
				##
					<err-expected-open>;
				};

				list-of-things(a, child, r2);

				{
					CLOSE;
				##
					<err-expected-close>;
				};
			##
				<err-expected-list>;
			};
		};

		zone-thing: (a :ast, parent :zone, exit :fsm) -> () [

			zone-from-mapping: (a :ast, parent :zone, exit :fsm) -> (child :zone) = {
				(r, t) = token-mapping(parent);

				q = <subtract-exit>(r, exit);

				child = <make-zone>(a, parent);

				<add-mapping>(a, parent, child, q, t);
			};

			list-of-zone-from-mappings: (a :ast, parent :zone, exit :fsm) -> (child :zone) [

				list-of-zone-from-mappings-x: (a :ast, parent :zone, child :zone, exit :fsm) -> () = {
					$;
				||
					COMMA;

					(r, t) = token-mapping(parent);

					q = <subtract-exit>(r, exit);

					<add-mapping>(a, parent, child, q, t);

					list-of-zone-from-mappings-x(a, parent, child, exit);
				};

			] = {
				child = zone-from-mapping(a, parent, exit);

				list-of-zone-from-mappings-x(a, parent, child, exit);
			};

			zone-to-mapping: (a :ast, parent :zone, child :zone) -> (exit :fsm) = {
				(r, t) = token-mapping(parent);

				<add-mapping>(a, child, parent, r, t);

				exit = <clone>(r);
			};

			list-of-zone-to-mappings: (a :ast, parent :zone, child :zone) -> (exit :fsm) [

				list-of-zone-to-mappings-x: (a :ast, parent :zone, child :zone, exit :fsm &) -> () = {
					$;
				||
					COMMA;

					old-exit = exit;

					new-exit = zone-to-mapping(a, parent, child);

					&exit = <op-alt>(old-exit, new-exit);

					list-of-zone-to-mappings-x(a, parent, child, &exit);
				};

			] = {
				exit = zone-to-mapping(a, parent, child);

				list-of-zone-to-mappings-x(a, parent, child, &exit);
			};

		] = {
			child = list-of-zone-from-mappings(a, parent, exit);

			{
				TO;
			##
				<err-expected-to>;
			};

			child-exit = list-of-zone-to-mappings(a, parent, child);

			{
				{
					SEMI;
				##
					<err-expected-semi>;
				};

				/*
				 * This is an implicit zone, written: /r1/ .. /r2/;
				 * which is equivalent to: /r1/ .. /r2/ { /./ - /r2/; }
				 * (i.e. discard everything which is not the exiting pattern.)
				 *
				 * If you want a zone where every character (other than the
				 * r2ing pattern) is treated as an error, then explicitly
				 * specify an empty zone instead: /r1/ .. /r2/ { }
				 */

				x = <no-zone>;
				y = <no-token>;

				/*
				 * The exit pattern takes precedence over the zone body because
				 * it matches the shortest expression, rather than the usual
				 * greedy matching (which could traverse out of its accept state).
				 *
				 * This is easier to see visually; there are no transitions out
				 * of the exit pattern's accepting states because the result of
				 * subtraction is trimmed of dead states.
				 */

				w = <regex-any>;
				v = <subtract-exit>(w, child-exit);

				<add-mapping>(a, child, x, v, y);
			||
				{
					OPEN;
				##
					<err-expected-open>;
				};

				list-of-things(a, child, child-exit);

				{
					CLOSE;
				##
					<err-expected-close>;
				};
			##
				<err-expected-list>;
			};
		};

		/*
		 * All "things" within a zone have the parent zone's exit pattern
		 * subtracted from them (for an inner zone, the entry pattern
		 * has its parent's exit pattern subtracted).
		 *
		 * This is done just for user convenience; given that matching the
		 * exit pattern within a zone is illegal anyway (due to conflict),
		 * it is reasonable to write (for example) /./ and have the exit
		 * pattern excluded from that.
		 */

		thing: (a :ast, z :zone, exit :fsm) -> () = {
			(r, t) = token-thing(a, z, exit);
			to = <no-zone>;
			<add-mapping>(a, z, to, r, t);
		||
			bind-thing(a, z);
		||
			zone-thing(a, z, exit);
		||
			oneway-thing(a, z, exit);
		##
			<err-expected-thing>;
		};

	] = {
		thing(a, z, exit);
	||
		list-of-things(a, z, exit);
		thing(a, z, exit);
	##
		<err-expected-list>;
	};

	lx: () -> (a :ast) = {
		parent = <no-zone>;

		a = <make-ast>;
		z = <make-zone>(a, parent);

		exit = <no-exit>;

		<set-globalzone>(a, z);

		list-of-things(a, z, exit);

		{
			EOF;
		##
			<err-expected-eof>;
		};
	##
		a = <make-ast>;

		<err-syntax>;
	};

%entry%

	lx;

